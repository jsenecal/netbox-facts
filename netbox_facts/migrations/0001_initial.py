# Generated by Django 4.2.6 on 2023-10-20 19:36

import dcim.fields
from django.db import migrations, models
import django.db.models.deletion
import netbox_facts.fields
import netbox_facts.models.mac
import taggit.managers
import utilities.json


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extras", "0098_webhook_custom_field_data_webhook_tags"),
        ("tenancy", "0011_contactassignment_tags"),
        ("dcim", "0181_rename_device_role_device_role"),
    ]

    operations = [
        migrations.CreateModel(
            name="MACAddress",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("mac_address", dcim.fields.MACAddressField(unique=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("comments", models.TextField(blank=True)),
                (
                    "interface",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="dcim.interface",
                    ),
                ),
            ],
            options={
                "verbose_name": "MAC Address",
                "verbose_name_plural": "MAC Addresses",
                "ordering": ("mac_address",),
            },
        ),
        migrations.CreateModel(
            name="MACVendor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("mac_prefix", netbox_facts.fields.MACPrefixField(max_length=8, unique=True)),
                ("comments", models.TextField(blank=True)),
                (
                    "manufacturer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="mac_prefixes",
                        to="dcim.manufacturer",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "MAC Vendor Prefix",
                "verbose_name_plural": "MAC Vendor Prefixes",
                "ordering": ("manufacturer",),
            },
            managers=[
                ("objects", netbox_facts.models.mac.MACVendorManager()),
            ],
        ),
        migrations.CreateModel(
            name="MACAddressInterfaceRelation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("interface", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="dcim.interface")),
                (
                    "mac_address",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="netbox_facts.macaddress"),
                ),
            ],
            options={
                "unique_together": {("mac_address", "interface")},
            },
        ),
        migrations.AddField(
            model_name="macaddress",
            name="known_by",
            field=models.ManyToManyField(
                related_name="known_mac_addresses",
                through="netbox_facts.MACAddressInterfaceRelation",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="macaddress",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="macaddress",
            name="vendor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="instances",
                to="netbox_facts.macvendor",
            ),
        ),
        migrations.CreateModel(
            name="CollectorDefinition",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("weight", models.PositiveSmallIntegerField(default=1000)),
                ("status", models.CharField(default="enabled", max_length=50)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("device_status", models.CharField(blank=True, default="active", max_length=50)),
                ("collector_type", models.CharField(max_length=50)),
                ("napalm_driver", models.CharField(max_length=50)),
                ("napalm_args", models.JSONField(blank=True, null=True)),
                ("enabled", models.BooleanField(default=True)),
                ("comments", models.TextField(blank=True)),
                ("device_types", models.ManyToManyField(blank=True, related_name="+", to="dcim.devicetype")),
                ("devices", models.ManyToManyField(blank=True, related_name="+", to="dcim.device")),
                ("locations", models.ManyToManyField(blank=True, related_name="+", to="dcim.location")),
                ("platforms", models.ManyToManyField(blank=True, related_name="+", to="dcim.platform")),
                ("regions", models.ManyToManyField(blank=True, related_name="+", to="dcim.region")),
                ("roles", models.ManyToManyField(blank=True, related_name="+", to="dcim.devicerole")),
                ("site_groups", models.ManyToManyField(blank=True, related_name="+", to="dcim.sitegroup")),
                ("sites", models.ManyToManyField(blank=True, related_name="+", to="dcim.site")),
                ("tags", models.ManyToManyField(blank=True, related_name="+", to="extras.tag")),
                ("tenant_groups", models.ManyToManyField(blank=True, related_name="+", to="tenancy.tenantgroup")),
                ("tenants", models.ManyToManyField(blank=True, related_name="+", to="tenancy.tenant")),
            ],
            options={
                "verbose_name": "Collector Definition",
                "verbose_name_plural": "Collector Definitions",
                "ordering": ["weight", "name"],
            },
        ),
        migrations.CreateModel(
            name="CollectionJob",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("scheduled", models.DateTimeField(blank=True, null=True)),
                ("started", models.DateTimeField(blank=True, null=True)),
                ("completed", models.DateTimeField(blank=True, null=True)),
                ("status", models.CharField(default="pending", max_length=30)),
                ("job_id", models.UUIDField(unique=True)),
                (
                    "job_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="netbox_facts.collectordefinition",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="macaddress",
            index=models.Index(fields=["mac_address"], name="netbox_fact_mac_add_e18267_idx"),
        ),
    ]
